pipeline {
    agent any
    environment {
        REPO = "s10-final/S10P31C103"
        DOCKERHUB_REGISTRY = "superjaehun/back"
        DOCKERHUB_CREDENTIALS = credentials('Docker-hub')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/BackEnd") {
                    script {
                        sh "ls -al"
                        sh "chmod +x ./gradlew"
                    }
                }
            }
        }
        stage('Stop and Remove Container') {
            steps {
                script {
                    sh "docker stop back || true"
                    sh "docker rm back || true"
                }
            }
        }
        stage('Remove Old Images') {
            steps {
                script {
                    sh "docker images ${DOCKERHUB_REGISTRY} -q | xargs -r docker rmi || true"
                    sh "docker images -f 'dangling=true' -q | xargs -r docker rmi || true"               
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "docker build -t ${DOCKERHUB_REGISTRY} BackEnd"
                }
            }
        }
        stage("Login") {
            steps {
                script {
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker push ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker rmi ${DOCKERHUB_REGISTRY} || true"
                        sh "docker pull ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "cd ${env.WORKSPACE}/BackEnd"
                        try {
                            sh "docker-compose up -d"
                        } catch(Exception e) {
                            sh "docker-compose up -d --force-recreate"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good', 
                message: "BE 빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/78w7rgew5bryuby44g9izun9xe', 
                channel: 'C103-Jenkins'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger', 
                message: "BE 빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/78w7rgew5bryuby44g9izun9xe', 
                channel: 'C103-Jenkins'
                )
            }
        }
    }
}


// pipeline {
//     agent any
//     environment {
//         REPO = "s10-final/S10P31C103"
//         DOCKERHUB_REGISTRY = "superjaehun/back"
//         DOCKERHUB_CREDENTIALS = credentials('Docker-hub')
//     }
//     stages {
//         stage('Checkout') {
//             steps {
//                 checkout scm
//             }
//         }
//         stage('Setup Environment') {
//             steps {
//                 dir("${env.WORKSPACE}/BackEnd") {
//                     script {
//                         sh "ls -al"
//                         sh "chmod +x ./gradlew"
//                     }
//                 }
//             }
//         }
//         stage('Stop and Remove Existing Containers') {
//             steps {
//                 script {
//                     sh "docker-compose -f docker-compose.yml down || true"  // 실행 중인 컨테이너 중지 및 제거
//                 }
//             }
//         }
//         stage('Remove Old Images') {
//             steps {
//                 script {
//                     sh "docker images -f 'dangling=true' -q | xargs -r docker rmi || true"               
//                 }
//             }
//         }
//         stage("Build with Docker Compose") {
//             steps {
//                 script {
//                     sh "/usr/local/bin/docker-compose -f docker-compose.yml build"

//                 }
//             }
//         }
//         stage("Login to Docker Hub") {
//             steps {
//                 script {
//                     sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
//                 }
//             }
//         }
//         stage("Tag and Push") {
//             steps {
//                 script {
//                     withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
//                         sh "docker-compose -f docker-compose.yml push"
//                     }
//                 }
//             }
//         }
//         stage('Deploy with Docker Compose') {
//             steps {
//                 script {
//                     withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
//                         sh "docker rmi ${DOCKERHUB_REGISTRY} || true"
//                         sh "docker pull ${DOCKERHUB_REGISTRY}"
//                     }
//                 }
//             }
//         }
//         stage('Up') {
//             steps {
//                 script {
//                     withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
//                         dir("BackEnd") {
//                             try {
//                                 sh "docker-compose up -d"
//                             } catch(Exception e) {
//                                 sh "docker-compose up -d --force-recreate"
//                             }
//                         }
//                     }
//                 }
//             }
//         }
//     }
//     post {
//         success {
//             script {
//                 def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
//                 def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
//                 mattermostSend (color: 'good', 
//                 message: "BE 빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
//                 endpoint: 'https://meeting.ssafy.com/hooks/78w7rgew5bryuby44g9izun9xe', 
//                 channel: 'C103-Jenkins'
//                 )
//             }
//         }
//         failure {
//             script {
//                 def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
//                 def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
//                 mattermostSend (color: 'danger', 
//                 message: "BE 빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
//                 endpoint: 'https://meeting.ssafy.com/hooks/78w7rgew5bryuby44g9izun9xe', 
//                 channel: 'C103-Jenkins'
//                 )
//             }
//         }
//     }
// }