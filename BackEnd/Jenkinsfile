pipeline {
    agent any
    environment {
        REPO = "s10-final/S10P31C103"
        DOCKERHUB_REGISTRY = "superjaehun/back"
        DOCKERHUB_CREDENTIALS = credentials('Docker-hub')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/BackEnd") {
                    script {
                        sh "ls -al"
                        sh "chmod +x ./gradlew"
                    }
                }
            }
        }
        stage('Stop and Remove Container') {
            steps {
                script {
                    sh "docker stop back || true"
                    sh "docker rm back || true"
                }
            }
        }
        stage('Remove Old Images') {
            steps {
                script {
                    sh "docker images ${DOCKERHUB_REGISTRY} -q | xargs -r docker rmi || true"
                    sh "docker images -f 'dangling=true' -q | xargs -r docker rmi || true"               
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    dir("${env.WORKSPACE}/BackEnd") {
                        sh "./gradlew clean build"
                        sh "docker build -t ${DOCKERHUB_REGISTRY} ."
                    }
                }
            }
        }
        stage("Login") {
            steps {
                script {
                    sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }
        stage("Push") {
            steps {
                script {
                    sh "docker push ${DOCKERHUB_REGISTRY}"
                }
            }
        }
        stage('Deploy') {
        steps {
            script {
                // Docker Compose 파일 경로 설정
                def dockerComposePath = "${env.WORKSPACE}/BackEnd/docker-compose.yml"
                
                // Docker Compose 파일 확인
                if (fileExists(dockerComposePath)) {
                    // 기존 컨테이너 중지 및 제거
                    sh "docker-compose -f ${dockerComposePath} down"
                    
                    // 새 이미지를 사용하여 컨테이너 시작
                    sh "docker-compose -f ${dockerComposePath} up -d"
                } else {
                    error "Docker Compose 파일이 존재하지 않습니다: ${dockerComposePath}"
                }
            }
        }
    }
    }
    post {
        success {
            mattermostSend (
                color: 'good',
                message: "BE 빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.CHANGE_AUTHOR} (${env.CHANGE_TITLE})\n${env.BUILD_URL}",
                endpoint: 'https://meeting.ssafy.com/hooks/78w7rgew5bryuby44g9izun9xe',
                channel: 'C103-Jenkins'
            )
        }
        failure {
            mattermostSend (
                color: 'danger',
                message: "BE 빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.CHANGE_AUTHOR} (${env.CHANGE_TITLE})\n${env.BUILD_URL}",
                endpoint: 'https://meeting.ssafy.com/hooks/78w7rgew5bryuby44g9izun9xe',
                channel: 'C103-Jenkins'
            )
        }
    }
}